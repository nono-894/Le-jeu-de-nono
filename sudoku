import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SudokuGame {
    private static final int SIZE = 9;
    private static final int SUBGRID = 3;
    private static final Color PASTEL_PINK = new Color(255, 182, 193);
    private static final Color LIGHT_PINK = new Color(255, 200, 220);
    private static final Color DEEP_PINK = new Color(255, 105, 180);
    
    private int[][] grid = {
        {8, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 3, 6, 0, 0, 0, 0, 0},
        {0, 7, 0, 0, 9, 0, 2, 0, 0},
        {0, 5, 0, 0, 0, 7, 0, 0, 0},
        {0, 0, 0, 0, 4, 5, 7, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 3, 0},
        {0, 0, 1, 0, 0, 0, 0, 6, 8},
        {0, 0, 8, 5, 0, 0, 0, 1, 0},
        {0, 9, 0, 0, 0, 0, 4, 0, 0}
    };
    
    private JTextField[][] fields = new JTextField[SIZE][SIZE];

    public SudokuGame() {
        JFrame frame = new JFrame("Sudoku - Niveau Difficile");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 550);
        frame.setLayout(new BorderLayout());
        frame.getContentPane().setBackground(PASTEL_PINK);
        
        JPanel panel = new JPanel(new GridLayout(SIZE, SIZE));
        panel.setBackground(PASTEL_PINK);
        
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                fields[row][col] = new JTextField();
                fields[row][col].setHorizontalAlignment(JTextField.CENTER);
                fields[row][col].setFont(new Font("Arial", Font.BOLD, 20));
                fields[row][col].setBackground((row / SUBGRID + col / SUBGRID) % 2 == 0 ? LIGHT_PINK : DEEP_PINK);
                
                if (grid[row][col] != 0) {
                    fields[row][col].setText(String.valueOf(grid[row][col]));
                    fields[row][col].setEditable(false);
                    fields[row][col].setForeground(Color.DARK_GRAY);
                } else {
                    fields[row][col].setForeground(Color.BLACK);
                }
                
                panel.add(fields[row][col]);
            }
        }
        
        JButton solveButton = new JButton("Résoudre");
        solveButton.setBackground(DEEP_PINK);
        solveButton.setForeground(Color.WHITE);
        solveButton.setFont(new Font("Arial", Font.BOLD, 18));
        solveButton.addActionListener(e -> solveSudoku());
        
        frame.add(panel, BorderLayout.CENTER);
        frame.add(solveButton, BorderLayout.SOUTH);
        frame.setVisible(true);
    }
    
    private boolean solve(int row, int col) {
        if (row == SIZE) return true;
        if (col == SIZE) return solve(row + 1, 0);
        if (grid[row][col] != 0) return solve(row, col + 1);
        
        for (int num = 1; num <= SIZE; num++) {
            if (isValid(row, col, num)) {
                grid[row][col] = num;
                if (solve(row, col + 1)) return true;
                grid[row][col] = 0;
            }
        }
        return false;
    }
    
    private boolean isValid(int row, int col, int num) {
        for (int i = 0; i < SIZE; i++) {
            if (grid[row][i] == num || grid[i][col] == num) return false;
        }
        int boxRow = (row / SUBGRID) * SUBGRID;
        int boxCol = (col / SUBGRID) * SUBGRID;
        for (int i = 0; i < SUBGRID; i++) {
            for (int j = 0; j < SUBGRID; j++) {
                if (grid[boxRow + i][boxCol + j] == num) return false;
            }
        }
        return true;
    }
    
    private void solveSudoku() {
        if (solve(0, 0)) {
            for (int row = 0; row < SIZE; row++) {
                for (int col = 0; col < SIZE; col++) {
                    fields[row][col].setText(String.valueOf(grid[row][col]));
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Aucune solution trouvée!", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(SudokuGame::new);
    }
}
